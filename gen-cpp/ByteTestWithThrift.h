/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ByteTestWithThrift_H
#define ByteTestWithThrift_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "byteTestWithThrift_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ByteTestWithThriftIf {
 public:
  virtual ~ByteTestWithThriftIf() {}
  virtual int32_t testByte(const std::string& data) = 0;
  virtual void testMessage(std::string& _return, const std::string& name) = 0;
};

class ByteTestWithThriftIfFactory {
 public:
  typedef ByteTestWithThriftIf Handler;

  virtual ~ByteTestWithThriftIfFactory() {}

  virtual ByteTestWithThriftIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ByteTestWithThriftIf* /* handler */) = 0;
};

class ByteTestWithThriftIfSingletonFactory : virtual public ByteTestWithThriftIfFactory {
 public:
  ByteTestWithThriftIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ByteTestWithThriftIf>& iface) : iface_(iface) {}
  virtual ~ByteTestWithThriftIfSingletonFactory() {}

  virtual ByteTestWithThriftIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ByteTestWithThriftIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ByteTestWithThriftIf> iface_;
};

class ByteTestWithThriftNull : virtual public ByteTestWithThriftIf {
 public:
  virtual ~ByteTestWithThriftNull() {}
  int32_t testByte(const std::string& /* data */) {
    int32_t _return = 0;
    return _return;
  }
  void testMessage(std::string& /* _return */, const std::string& /* name */) {
    return;
  }
};

typedef struct _ByteTestWithThrift_testByte_args__isset {
  _ByteTestWithThrift_testByte_args__isset() : data(false) {}
  bool data :1;
} _ByteTestWithThrift_testByte_args__isset;

class ByteTestWithThrift_testByte_args {
 public:

  ByteTestWithThrift_testByte_args(const ByteTestWithThrift_testByte_args&);
  ByteTestWithThrift_testByte_args& operator=(const ByteTestWithThrift_testByte_args&);
  ByteTestWithThrift_testByte_args() : data() {
  }

  virtual ~ByteTestWithThrift_testByte_args() throw();
  std::string data;

  _ByteTestWithThrift_testByte_args__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const ByteTestWithThrift_testByte_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const ByteTestWithThrift_testByte_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ByteTestWithThrift_testByte_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ByteTestWithThrift_testByte_pargs {
 public:


  virtual ~ByteTestWithThrift_testByte_pargs() throw();
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ByteTestWithThrift_testByte_result__isset {
  _ByteTestWithThrift_testByte_result__isset() : success(false) {}
  bool success :1;
} _ByteTestWithThrift_testByte_result__isset;

class ByteTestWithThrift_testByte_result {
 public:

  ByteTestWithThrift_testByte_result(const ByteTestWithThrift_testByte_result&);
  ByteTestWithThrift_testByte_result& operator=(const ByteTestWithThrift_testByte_result&);
  ByteTestWithThrift_testByte_result() : success(0) {
  }

  virtual ~ByteTestWithThrift_testByte_result() throw();
  int32_t success;

  _ByteTestWithThrift_testByte_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const ByteTestWithThrift_testByte_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ByteTestWithThrift_testByte_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ByteTestWithThrift_testByte_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ByteTestWithThrift_testByte_presult__isset {
  _ByteTestWithThrift_testByte_presult__isset() : success(false) {}
  bool success :1;
} _ByteTestWithThrift_testByte_presult__isset;

class ByteTestWithThrift_testByte_presult {
 public:


  virtual ~ByteTestWithThrift_testByte_presult() throw();
  int32_t* success;

  _ByteTestWithThrift_testByte_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ByteTestWithThrift_testMessage_args__isset {
  _ByteTestWithThrift_testMessage_args__isset() : name(false) {}
  bool name :1;
} _ByteTestWithThrift_testMessage_args__isset;

class ByteTestWithThrift_testMessage_args {
 public:

  ByteTestWithThrift_testMessage_args(const ByteTestWithThrift_testMessage_args&);
  ByteTestWithThrift_testMessage_args& operator=(const ByteTestWithThrift_testMessage_args&);
  ByteTestWithThrift_testMessage_args() : name() {
  }

  virtual ~ByteTestWithThrift_testMessage_args() throw();
  std::string name;

  _ByteTestWithThrift_testMessage_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const ByteTestWithThrift_testMessage_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ByteTestWithThrift_testMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ByteTestWithThrift_testMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ByteTestWithThrift_testMessage_pargs {
 public:


  virtual ~ByteTestWithThrift_testMessage_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ByteTestWithThrift_testMessage_result__isset {
  _ByteTestWithThrift_testMessage_result__isset() : success(false) {}
  bool success :1;
} _ByteTestWithThrift_testMessage_result__isset;

class ByteTestWithThrift_testMessage_result {
 public:

  ByteTestWithThrift_testMessage_result(const ByteTestWithThrift_testMessage_result&);
  ByteTestWithThrift_testMessage_result& operator=(const ByteTestWithThrift_testMessage_result&);
  ByteTestWithThrift_testMessage_result() : success() {
  }

  virtual ~ByteTestWithThrift_testMessage_result() throw();
  std::string success;

  _ByteTestWithThrift_testMessage_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const ByteTestWithThrift_testMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ByteTestWithThrift_testMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ByteTestWithThrift_testMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ByteTestWithThrift_testMessage_presult__isset {
  _ByteTestWithThrift_testMessage_presult__isset() : success(false) {}
  bool success :1;
} _ByteTestWithThrift_testMessage_presult__isset;

class ByteTestWithThrift_testMessage_presult {
 public:


  virtual ~ByteTestWithThrift_testMessage_presult() throw();
  std::string* success;

  _ByteTestWithThrift_testMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ByteTestWithThriftClient : virtual public ByteTestWithThriftIf {
 public:
  ByteTestWithThriftClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ByteTestWithThriftClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t testByte(const std::string& data);
  void send_testByte(const std::string& data);
  int32_t recv_testByte();
  void testMessage(std::string& _return, const std::string& name);
  void send_testMessage(const std::string& name);
  void recv_testMessage(std::string& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ByteTestWithThriftProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ByteTestWithThriftIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ByteTestWithThriftProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_testByte(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_testMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ByteTestWithThriftProcessor(::apache::thrift::stdcxx::shared_ptr<ByteTestWithThriftIf> iface) :
    iface_(iface) {
    processMap_["testByte"] = &ByteTestWithThriftProcessor::process_testByte;
    processMap_["testMessage"] = &ByteTestWithThriftProcessor::process_testMessage;
  }

  virtual ~ByteTestWithThriftProcessor() {}
};

class ByteTestWithThriftProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ByteTestWithThriftProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ByteTestWithThriftIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ByteTestWithThriftIfFactory > handlerFactory_;
};

class ByteTestWithThriftMultiface : virtual public ByteTestWithThriftIf {
 public:
  ByteTestWithThriftMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ByteTestWithThriftIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ByteTestWithThriftMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ByteTestWithThriftIf> > ifaces_;
  ByteTestWithThriftMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ByteTestWithThriftIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t testByte(const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->testByte(data);
    }
    return ifaces_[i]->testByte(data);
  }

  void testMessage(std::string& _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->testMessage(_return, name);
    }
    ifaces_[i]->testMessage(_return, name);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ByteTestWithThriftConcurrentClient : virtual public ByteTestWithThriftIf {
 public:
  ByteTestWithThriftConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ByteTestWithThriftConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t testByte(const std::string& data);
  int32_t send_testByte(const std::string& data);
  int32_t recv_testByte(const int32_t seqid);
  void testMessage(std::string& _return, const std::string& name);
  int32_t send_testMessage(const std::string& name);
  void recv_testMessage(std::string& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif

// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ByteTestWithThrift.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <bits/stdc++.h>

using namespace std;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

std::string fileName = "/work/projects/thriftRPISample/encrypted.txt";

static std::string ReadAllBytes(char const* filename) {
    ifstream ifs(filename, ios::binary|ios::ate);
    ifstream::pos_type pos = ifs.tellg();
    std::vector<char>  result(pos);
    ifs.seekg(0, ios::beg);
    ifs.read(&result[0], pos);
    std::string ans = "";
    for(int i = 0; i<result.size(); ++i) {
       ans+=result[i];
    }
    return ans;
}

class ByteTestWithThriftHandler : virtual public ByteTestWithThriftIf {
 public:
  ByteTestWithThriftHandler() {
     printf("Server started successfully!!\n");
     printf("-----------------------------\n");
  }

  int32_t testByte(const std::string& data) {
    // Your implementation goes here
    printf("Data received at server in \"tetByte\" method!!\n");
    std::string bytefromFile = ReadAllBytes(fileName.c_str());
    if (bytefromFile == data) {
        printf("We got same expected file from client!!!\n");
        return 0; // success code indicating same data
    }
    return -1; // failure code indicating different data
  }

  void testMessage(std::string& _return, const std::string& name) {
    // Your implementation goes here
     printf("testMessage Method is called!!\n");
    _return="Hello !! ";
    _return+=name;
  }

};

int main(int argc, char **argv) {
  int port = 9095;
  ::apache::thrift::stdcxx::shared_ptr<ByteTestWithThriftHandler> handler(new ByteTestWithThriftHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new ByteTestWithThriftProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

